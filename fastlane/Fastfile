# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  before_all do
    setup_circle_ci
  end
  desc "Push a new beta build to TestFlight (Used by CircleCI)"
  lane :beta do
    # Ensure that your git status is not dirty
    ensure_git_status_clean

    # Increment the build number (not the version number)
    # Providing the xcodeproj is optional
    increment_build_number(
      build_number: latest_testflight_build_number + 1,
      xcodeproj: "ostelco-ios-client.xcodeproj"
    )
    # call certifcates lane
    certificates
    # build and upload dev app
    build_app(scheme: "dev-ostelco-ios-client")
    upload_to_testflight
    # Commit the version bump
    commit_version_bump(xcodeproj: "ostelco-ios-client.xcodeproj")

    # Add a git tag for this build. This will automatically
    # use an appropriate git tag name
    # add_git_tag

    # Push the new commit and tag back to your git remote
    push_to_git_remote(
      remote: "origin",
      local_branch: "HEAD",
      remote_branch: "master",
      force: true,
      tags: true
    )
  end

  desc "Push beta build to TestFlight from developer machine using testflight build numbers"
  lane :tfbeta do
    # Ensure that your git status is not dirty
    ensure_git_status_clean

    # Increment the build number (not the version number)
    # Providing the xcodeproj is optional

    # Bump version number here when it is changed in project files.
    latest_build_number = latest_testflight_build_number(
      version: "1.1"
    )

    build_number = ((latest_build_number.is_a? String) ? latest_build_number.to_i : latest_build_number) + 1

    increment_build_number(
      build_number: build_number,
      xcodeproj: "ostelco-ios-client.xcodeproj"
    )

    # build and upload dev app
    build_app(scheme: "dev-ostelco-ios-client")
    upload_to_testflight(skip_waiting_for_build_processing: true)
    # Commit the version bump
    commit_version_bump(xcodeproj: "ostelco-ios-client.xcodeproj")

    # Add a git tag for this build. This will automatically
    # use an appropriate git tag name
    add_git_tag

    # Push the new commit and tag back to your git remote
    push_to_git_remote
  end

  desc "Push beta build to TestFlight from developer machine using local build number"
  lane :localbeta do
    # Ensure that your git status is not dirty
    ensure_git_status_clean

    # Increment the build number (not the version number)
    # Providing the xcodeproj is optional

    # Get the current build number from the project file
    latest_build_number = get_build_number(
      xcodeproj: "ostelco-ios-client.xcodeproj"
    )
    build_number = ((latest_build_number.is_a? String) ? latest_build_number.to_i : latest_build_number) + 1

    increment_build_number(
      build_number: build_number,
      xcodeproj: "ostelco-ios-client.xcodeproj"
    )

    # build and upload dev app
    build_app(scheme: "dev-ostelco-ios-client")
    upload_to_testflight(skip_waiting_for_build_processing: true)
    # Commit the version bump
    commit_version_bump(xcodeproj: "ostelco-ios-client.xcodeproj")

    # Add a git tag for this build. This will automatically
    # use an appropriate git tag name
    add_git_tag

    # Push the new commit and tag back to your git remote
    push_to_git_remote
  end

  desc "Installs the certificates and profiles locally"
  lane :certificates do
    match(
      app_identifier: ["sg.redotter.dev.selfcare", "sg.redotter.selfcare"],
      type: "development",
      readonly: true
    )
    match(
      app_identifier: ["sg.redotter.dev.selfcare", "sg.redotter.selfcare"],
      type: "appstore",
      readonly: true
    )
  end

  desc "Runs all the tests"
  lane :test do
    scan(
      scheme: "dev-ostelco-ios-client",
      devices: ["iPhone X"]
    )
  end
  lane :refresh_dsyms do
    download_dsyms                  # Download dSYM files from iTC
    upload_symbols_to_crashlytics   # Upload them to Crashlytics
    clean_build_artifacts           # Delete the local dSYM files
  end

end
