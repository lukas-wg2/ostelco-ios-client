//
//  ImageGen.swift
//  Basic
//
//  Created by Ellen Shapiro on 6/11/19.
//

import Files

struct ImageGen {
    
    private static let imageSetPostfix = ".imageset"
    
    static func run(sourceRoot: Folder) throws {
        let appFolder = try sourceRoot.subfolder(named: "ostelco-ios-client")
        let assetsFolder = try appFolder.subfolder(named: "Assets")
        let assetCatalog = try assetsFolder.subfolder(named: "Assets.xcassets")
        
        let boilerplate = try self.generate(from: assetCatalog)
        
        let generatedCodeFolder = try appFolder.subfolder(named: "Generated")
        let targetFile = try generatedCodeFolder.file(named: "ImageAsset.swift")
        try self.write(boilerplate: boilerplate, to: targetFile)
    }
    
    static func write(boilerplate: String, to file: File) throws {
        try file.write(string: boilerplate)
    }
    
    static func generate(from assetCatalog: Folder) throws -> String {
        let imageSets = assetCatalog.subfolders
            .filter { $0.name.hasSuffix(self.imageSetPostfix) }
            .map { $0.name.replacingOccurrences(of: self.imageSetPostfix, with: "") }
        
        let cases = imageSets
            .map { "    case \($0)"}
            .joined(separator: "\n")
        
        let staticLets = imageSets
            .map { "    static let ostelco_\($0) = UIImage(from: .\($0))" }
            .joined(separator: "\n\n")
        
        let generatedCode = """
        /* This file is automatically generated. Don't try to edit it by hand! */
        
        /// Helper class for finding the proper bundle
        private class ImageBundleHelper {}
        
        /// Images contained within the asset catalog
        public enum ImageAsset: String, CaseIterable {
        \(cases)
        }
        
        public extension UIImage {
            convenience init(from imageAsset: ImageAsset) {
                self.init(named: imageAsset.rawValue,
                          in: Bundle(for: ImageBundleHelper.self),
                          compatibleWith: nil)!
            }
        
        \(staticLets)
        }
        
        """
        
        return generatedCode
    }
}
